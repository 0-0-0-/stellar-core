PEER_PORT= 39133
RUN_STANDALONE=false
LOG_FILE_PATH="favorite.log"

HTTP_PORT=39132
PUBLIC_HTTP_PORT=false


# every node has a PEER_SEED.
# what generates the peerID (used for peer connections) used by this node
# if left off will generate a random one for you
PEER_SEED="s3vdAQ19YpHzRn3qbNLjLtvE3wD24WLxnoyNxsgsQ3qrRpVp4Ct"

# what generates the nodeID (used in SCP)
# only nodes that want to participate in SCP need to set VALIDATION_SEED
# most instances should operate in observer mode without a seed set here
#VALIDATION_SEED="sfmYZRUn4ofZHzitXupxrrz5QJ7b9mij3rSEdrTNRFVvVgigrcS"


# will send outbound connections till we are at this number of peer connections
TARGET_PEER_CONNECTIONS=20

# will start dropping peers if above this number of connected peers
MAX_PEER_CONNECTIONS=30

#Peers we will always try to stay connected to
PREFERRED_PEERS=["127.0.0.1:7000","127.0.0.1:8000"]

KNOWN_PEERS=[
"core-testnet1.stellar.org",
"core-testnet2.stellar.org", 
"core-testnet3.stellar.org"]

# list of commands to run on startup
# right now only setting log levels really makes sense
COMMANDS=[
"ll?level=info&partition=Herder"
]

# Connection string for SOCI
#
# If using sqlite, a string like:
#
#   "sqlite3://path/to/dbname.db"
#
# alternatively, if using postgresql, a string like:
#
#   "postgresql://dbname=stellar user=xxxx password=yyyy host=10.0.x.y"
#
# taking any combination of parameters from:
#
#   http://www.postgresql.org/docs/devel/static/libpq-connect.html#LIBPQ-PARAMKEYWORDS
#
DATABASE="sqlite3://stellar.db"

# Specifing this servers quorom set
# can be nested 2 levels: (A,B,C,(D,E,F),(G,H,(I,J,K,L)))
# The threshold is how many have to agree where the sets are treated as one vote
# so for example in the above there are 5 things that can vote: 
# individual validators: A,B,C and sets (D,E,F) and set (G,H with subset (I,J,K,L))
# the sets each have their own threshold.
# this allows you to for example, treat 3 servers of some enitity as one vote but
# you only need to hear from 2 of them 
# the below is equivalent to the example above
[QUORUM_SET]
THRESHOLD=3
VALIDATORS=[
"gTDZhQ14WuP8rQ9SrkS1EhWNhZyybv97cHNsGRADKQtBoJpTTk", 
"gsjjWTsQP5C2HpcetiLz4LDa9VECGvZMTyhPUDWi57ZKafV5sA4",
"gSCB2HML88CvMwt2iryJGdS61gDr2nhMeYFVWF2B4m6w5js73T"]
  [QUORUM_SET.1] 
  THRESHOLD=2
  VALIDATORS=[
	"guycZaKAUdAdzKkx3tWtNFxe2c1QZX2JPJRF92qPWF4PYRSkCC", 
	"gM9KVYk68ZicQNRzn9dqEdUfsZWMykYxE8jBEmNdmPg6Vvrit7", 
	"gsXosu1LKu5eqZjrxUbzP3p6FgSW5fF3nqZspQLHbpCBrFr8MXg"]
  [QUORUM_SET.2]
    THRESHOLD=2
	VALIDATORS=[
	"gsm4cgwE3N8nw3y5Bpid3hAiLkbyCUvuC5NbpcELAmHpM8dhJJr", 
	"gGpsywemJ9EGYfrZsBa8UxBL2pLHZgnpqczA3hJ5JEK3LcwTmu"]
    [QUORUM_SET.2.1]
	THRESHOLD=3
	VALIDATORS=[
	"gJV53CbQxS5BcZCfVMkMmfkxPXeJJVk9JFdmLUQ5NXxgutdQTX", 
	"gs8eQ4tAvjsZQ2dBB3t9gJyYt3PMndeSiJf23WcbniM7NA5kfhq",
	"gsGep6Rmz3j5e7kPkxUiL6cEWnSgpP6MB1DLW5RRd9sMzNuCX4B",
	"g7qYFEDL5cqdKmwBDJqVyeq5Tj9mnbfsAaZa6FabcqLAYbdnNK"]



# Specify where to fetch and the the history Archives
# with template parameters `{0}` and `{1}` in place of the files being transmitted or retrieved.
# you can specify multiple places to store and fetch from
[HISTORY.vs]
get="cp /tmp/stellar-core/history/vs/{0} {1}"
put="cp {0} /tmp/stellar-core/history/vs/{1}"
mkdir="mkdir -p /tmp/stellar-core/history/vs/{0}"

# [HISTORY.stellar]
# get="curl http://history.stellar.org/{0} -o {1}"
# put="aws s3 cp {0} s3://history.stellar.org/{1}"

# [HISTORY.backup]
# get="curl http://backupstore.blob.core.windows.net/backupstore/{0} -o {1}"
# put="azure storage blob upload {0} backupstore {1}"

#The history store of the Stellar testnet
#[HISTORY.h1]
#get="curl -sf https://s3-eu-west-1.amazonaws.com/history.stellar.org/prd/core-testnet/core-testnet-001/{0} -o {1}"

#[HISTORY.h2]
#get="curl -sf https://s3-eu-west-1.amazonaws.com/history.stellar.org/prd/core-testnet/core-testnet-002/{0} -o {1}"

#[HISTORY.h3]
#get="curl -sf https://s3-eu-west-1.amazonaws.com/history.stellar.org/prd/core-testnet/core-testnet-003/{0} -o {1}"

