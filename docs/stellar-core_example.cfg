PEER_PORT= 39133
RUN_STANDALONE=false
LOG_FILE_PATH="favorite.log"

HTTP_PORT=39132
PUBLIC_HTTP_PORT=false


# every node has a PEER_SEED.
# what generates the peerID (used for peer connections) used by this node
# if left off will generate a random one for you
PEER_SEED="SDVASBVCLTGCDXD2C3O3BDI4EYF22ZXCNOBSEKHWSQQLXA4AZF5VZUJI"

# what generates the nodeID (used in SCP)
# only nodes that want to participate in SCP need to set VALIDATION_SEED
# most instances should operate in observer mode without a seed set here
#VALIDATION_SEED="SBI3CZU7XZEWVXU7OZLW5MMUQAP334JFOPXSLTPOH43IRTEQ2QYXU5RG"


# will send outbound connections till we are at this number of peer connections
TARGET_PEER_CONNECTIONS=20

# will start dropping peers if above this number of connected peers
MAX_PEER_CONNECTIONS=30

#Peers we will always try to stay connected to
PREFERRED_PEERS=["127.0.0.1:7000","127.0.0.1:8000"]

KNOWN_PEERS=[
"core-testnet1.stellar.org",
"core-testnet2.stellar.org", 
"core-testnet3.stellar.org"]

# list of commands to run on startup
# right now only setting log levels really makes sense
COMMANDS=[
"ll?level=info&partition=Herder"
]

# Connection string for SOCI
#
# If using sqlite, a string like:
#
#   "sqlite3://path/to/dbname.db"
#
# alternatively, if using postgresql, a string like:
#
#   "postgresql://dbname=stellar user=xxxx password=yyyy host=10.0.x.y"
#
# taking any combination of parameters from:
#
#   http://www.postgresql.org/docs/devel/static/libpq-connect.html#LIBPQ-PARAMKEYWORDS
#
DATABASE="sqlite3://stellar.db"

# Specifing this servers quorom set
# can be nested 2 levels: (A,B,C,(D,E,F),(G,H,(I,J,K,L)))
# The threshold is how many have to agree where the sets are treated as one vote
# so for example in the above there are 5 things that can vote: 
# individual validators: A,B,C and sets (D,E,F) and set (G,H with subset (I,J,K,L))
# the sets each have their own threshold.
# this allows you to for example, treat 3 servers of some enitity as one vote but
# you only need to hear from 2 of them 
# the below is equivalent to the example above
[QUORUM_SET]
THRESHOLD=3
VALIDATORS=[
"GDQWITFJLZ5HT6JCOXYEVV5VFD6FTLAKJAUDKHAV3HKYGVJWA2DPYSQV",
"GANLKVE4WOTE75MJS6FQ73CL65TSPYYMFZKC4VDEZ45LGQRCATGAIGIA",
"GDV46EIEF57TDL4W27UFDAUVPDDCKJNVBYB3WIV2WYUYUG753FCFU6EJ"]
[QUORUM_SET.1]
THRESHOLD=2
VALIDATORS=[
"GDKYAJOBUIXSFGGE3EPBSGZD7JT2YKMFLELG6A27LUCZWH4T52TPP6LH",
"GDXJAZZJ3H5MJGR6PDQX3JHRREAVYNCVM7FJYGLZJKEHQV2ZXEUO5SX2",
"GB6GK3WWTZYY2JXWM6C5LRKLQ2X7INQ7IYTSECCG3SMZFYOZNEZR4SO5"]
[QUORUM_SET.2]
THRESHOLD=2
VALIDATORS=[
"GCTAIXWDDBM3HBDHGSAOLY223QZHPS2EDROF7YUBB3GNYXLOCPV5PXUK",
"GCJ6UBAOXNQFN3HGLCVQBWGEZO6IABSMNE2OCQC4FJAZXJA5AIE7WSPW"]
[QUORUM_SET.2.1]
THRESHOLD=3
VALIDATORS=[
"GC4X65TQJVI3OWAS4DTA2EN2VNZ5ZRJD646H5WKEJHO5ZHURDRAX2OTH",
"GAXSWUO4RBELRQT5WMDLIKTRIKC722GGXX2GIGEYQZDQDLOTINQ4DX6F",
"GAWOEMG7DQDWHCFDTPJEBYWRKUUZTX2M2HLMNABM42G7C7IAPU54GL6X",
"GDZAJNUUDJFKTZX3YWZSOAS4S4NGCJ5RQAY7JPYBG5CUFL3JZ5C3ECOH"]


# Specify where to fetch and the the history Archives
# with template parameters `{0}` and `{1}` in place of the files being transmitted or retrieved.
# you can specify multiple places to store and fetch from
[HISTORY.vs]
get="cp /tmp/stellar-core/history/vs/{0} {1}"
put="cp {0} /tmp/stellar-core/history/vs/{1}"
mkdir="mkdir -p /tmp/stellar-core/history/vs/{0}"

# [HISTORY.stellar]
# get="curl http://history.stellar.org/{0} -o {1}"
# put="aws s3 cp {0} s3://history.stellar.org/{1}"

# [HISTORY.backup]
# get="curl http://backupstore.blob.core.windows.net/backupstore/{0} -o {1}"
# put="azure storage blob upload {0} backupstore {1}"

#The history store of the Stellar testnet
#[HISTORY.h1]
#get="curl -sf https://s3-eu-west-1.amazonaws.com/history.stellar.org/prd/core-testnet/core-testnet-001/{0} -o {1}"

#[HISTORY.h2]
#get="curl -sf https://s3-eu-west-1.amazonaws.com/history.stellar.org/prd/core-testnet/core-testnet-002/{0} -o {1}"

#[HISTORY.h3]
#get="curl -sf https://s3-eu-west-1.amazonaws.com/history.stellar.org/prd/core-testnet/core-testnet-003/{0} -o {1}"

