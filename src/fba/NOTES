Outstanding questions for @dm:
------------------------------

- attemptValue semantics
If our node already emitted a PREPARE message for a ballot (0,x) it received
from another node. What should be the behaviour if the local user of FBA wants
to attempt another value y. Can it just emit a new PREPARE message with ballot
(0,y) since the abort pledges it represents are exactly the same.

- isPrepared implementation
Please check the code and let's discuss any error you find there  

- processEnvelope semantics
When I receive a PREPARED message from a node, I opportunistically update the
old PREPARE message for that same node by setting the optional prepared ballot
to the current ballot. The goal is to be able to only consider PREPARE
envelopes to determine if an excepted ballot is aborted in isPrepared() (see
abortedFilter)

- V-blocking incompatible PREPARED (Q: 3 out of 4)
1: PREPARE (1,x) - PREPARED (1,x)
2: PREPARE (1,x) - PREPARED (1,x)
3: PREPARE (1,y) - ?
4: PREPARE (1,x) - DIE
> Can 3 move onto PREPARED(1,y) directly? Should it?

[x] TESTCASE: attemptValue (1,x) then receive PREPARE/PREPARED (1,y)

- attemptValue after PREPARE (Q: 3 out of 4)
1: PREPARE (1,x) - attemptValue(y) - ?
2: PREPARE (1,y)                   
3: PREPARE (1,y)
4: PREPARE (1,z)
> Can 1 emit directly a PREPARE (1,x)? Or should we move onto (2,y)?

- participation after externalization
1: ... - COMMITTED (1,x) -               - COMMITTED (inf,x)
2: ... - COMMITTED (1,x) -               - COMMITTED (inf,x)
3: ... - COMMITTED (1,x) -               - COMMITTED (inf,x)
4:    (4 is down)        - PREPARE (1,y) - COMMITTED (inf,x)
> I think we only need to reemit COMMITTED messages with (inf,x). Correct?
> This requires a shortcut in progressFBA to skip to isCommittedConfirmed if
> possible

[x] TESTCASE: committed message directly received. skip to externalization.
[x] TESTCASE: if externalized send committed in response to PREPARE(D), COMMIT(TED)
[x] TESTCASE: ignore previous ballot counter
[x] TESTCASE: cancelled pledge to commit

Some personal notes [@spolu]:
-----------------------------
- Why we must keep track of incompatible ballot envelopes for the same ballot
  counter (Q:3 out of 4)
1: PREPARE (1,x) - PREPARED (1,x) - COMMIT (1,x) - COMMITTED (1,x)
2: PREPARE (1,x) - PREPARED (1,x) - COMMIT (1,x) - COMMITTED (1,x)
3: PREPARE (1,x) - PREPARED (1,x) - COMMIT (1,x) - COMMITTED (1,x)
4: PREPARE (1,y) -
> 4 must externalize so it must keep track of (1,x) envelopes even if it
> originally attempted (1,y). 
> That being said We could also get away we bumping the ballot and reverting to
> the post-externalization protocol.



